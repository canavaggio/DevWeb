class MyLogo extends HTMLElement{
    style = `

/* ----------------------------------------------
 * Generated by Animista on 2021-9-19 11:50:23
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation animationtext
 * ----------------------------------------
 */

 @-webkit-keyframes animationtext {
    0% {
      -webkit-transform: rotateX(0);
              transform: rotateX(0);
      
    }
    100% {
      -webkit-transform: rotateX(-360deg);
              transform: rotateX(-360deg);
    }
  }

 .animationtext {
    -webkit-animation: animationtext 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
            animation: animationtext 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
}



/**
 * ----------------------------------------
 * animation animationtext2
 * ----------------------------------------
 */

 @-webkit-keyframes animationtext2 {
    0% {
      -webkit-transform: rotateY(0);
              transform: rotateY(0);
      
    }
    100% {
      -webkit-transform: rotateY(-360deg);
              transform: rotateY(-360deg);
    }
  }
  
 .animationtext2 {
    -webkit-animation: animationtext2 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
            animation: animationtext2 3s cubic-bezier(0.455, 0.030, 0.515, 0.955) infinite both;
}


.logoContainer {
    position:relative;  
    top: 50%;
    left: 50%;
}

.elipse {
    width: 600px;
    height: 150px;
    background: transparent;
    border-radius: 100%;
    border: solid orange 5px;
    transform: translate(-50%, -50%);
    position:absolute;
    content:' ';
    top: 50%;
    left: 50%;
}

.elipse2 {
    width: 600px;
    height: 150px;
    background: transparent;
    border-radius: 100%;
    border: solid orange 5px;
    transform: translate(-50%, -50%) rotate(0.66turn);
    position:absolute;
    content:' ';
    top: 50%;
    left: 50%;
}

.elipse3 {
    width: 600px;
    height: 150px;
    background: transparent;
    border-radius: 100%;
    border: solid orange 5px;
    transform: translate(-50%, -50%) rotate(0.33turn);
    position:absolute;
    content:' ';
    top: 50%;
    left: 50%;
}

.cercle {
    width: 150px;
    height: 150px;
    background: transparent;
    border-radius: 100%;
    border: solid orange 5px;
    transform: translate(-50%, -50%);
    position:absolute;
    content:' ';
    top: 50%;
    left: 50%;
}

#textlogoid {
    position:absolute;
    content:' ';
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) rotate(0turn);
    font-family : 'Arial';
    font-size : 12px;
    font-weight : normal;
    color: black;
    text-shadow:;
    /*
    margin: auto;
    text-align: center;
    */
}


`;
html = `

<div id="logoContainerid" class="logoContainer">
    <div id="elipseid" class= "elipse"></div>
    <div id="elipseid2" class= "elipse2"></div>
    <div id="elipseid3" class= "elipse3"></div>
    <div id="cercleid" class="cercle"></div>
    <div id="animationtextid" >
    <div id="textlogoid" class="textlogo"> Mon Logo </div>  
    </div>
</div>

<br>
<br>
<br>
<br>
<div id="tableau">
    <font face= "Tahoma">
    <table id="tableauStyle" border=6px bordercolor= grey>
    <caption>Attributs du Logo</caption>
<tr>
<td>Changer le texte : </td>
<td> <input type=text id="selecteurText"> </td>
</tr>    
<tr>
<td>Police de caractère : </td>
<td>
<input list="font" type="text" id="selecteurFont">
<datalist id="font">
<option value="Arial">
<option value="Helvetica">
<option value="Times New Roman">
<option value="Tahoma">
</datalist></td>
</tr>
<tr>
<td>Couleur du texte :</td> 
<td><input type="color" id="selecteurCouleurText"></td>
</tr>
<tr>
<td>Taille du texte :</td>
<td> 5 <input type="range" val=40 min=5 max=100 id="selecteurTaille"> 100</td>
</tr>
<tr>
<td> Gras :</td>
<td><input type="button" value="Gras" id="selecteurWeight"></td>
</tr>
</tr>
<td> text-shadow :</td>
<td> <input type=text id="selecteurTextShadow"> </td>
</tr>
<tr>
<td> Couleur elipse 1 :</td>
<td><input type="color" id="selecteurcouleurelipse1"></td>
</tr>
<tr>
<td> Couleur elipse 2 :</td>
<td><input type="color" id="selecteurcouleurelipse2"></td>
</tr>
<tr>
<td> Couleur elipse 3 :</td>
<td><input type="color" id="selecteurcouleurelipse3"></td>
</tr>
<tr>
<td> Rotation elipse 1 :</td>
<td> 0 <input type="range" val=0.35 min=0 max=1 step=0.05
id="selecteurRotationElipse1"> 1</td>
</tr>
<tr>
<td> Rotation elipse 2 :</td>
<td> 0 <input type="range" val=0.35 min=0 max=1 step=0.05
id="selecteurRotationElipse2"> 1</td>
</tr>
<tr>
<td> Rotation elipse 3 :</td>
<td> 0 <input type="range" val=0.35 min=0 max=1 step=0.05
id="selecteurRotationElipse3"> 1</td>
</tr>
<tr>
<td> Largeur elipse 1 :</td>
<td> 0 <input type="range" val=150 min=0 max=300
id="selecteurLargeurElipse"> 300</td>
</tr>
<tr>
<td> Largeur elipse 2 :</td>
<td> 0 <input type="range" val=150 min=0 max=300
id="selecteurLargeurElipse2"> 300</td>
</tr>
<tr>
<td> Largeur elipse 3 :</td>
<td> 0 <input type="range" val=150 min=0 max=300
id="selecteurLargeurElipse3"> 300</td>
</tr>
<tr>
<td> Longueur elipse :</td>
<td> 0 <input type="range" val=150 min=0 max=800
id="selecteurLongueurElipse"> 800</td>
</tr>
<tr>
<td> Longueur elipse 2 :</td>
<td> 0 <input type="range" val=150 min=0 max=800
id="selecteurLongueurElipse2"> 800</td>
</tr>
<tr>
<td> Longueur elipse 3 :</td>
<td> 0 <input type="range" val=150 min=0 max=800
id="selecteurLongueurElipse3"> 800</td>
</tr>
<tr>
<td> Taille du rond :</td>
<td> 0 <input type="range" val=150 min=0 max=800
id="selecteurSizeRond"> 800</td>
</tr>
<tr>
<td> Couleur du rond :</td>
<td><input type="color" id="selecteurCouleurRond"></td>
</font>
</table>
</div>
    
    `;


constructor() {
    super();
    // On crée le "shadow DOM"
    this.attachShadow({ mode: "open" });

    // récupérer les propriétés/attributs HTML

    // Text attributs
    // Couleur text attribut
    this.couleurText = this.getAttribute("couleurText");
    // ! logical not 
    if(!this.couleurText) this.couleurText = "black";
   
    // Size text attribut
    this.sizeText = this.getAttribute("sizeText");
    if(!this.sizeText) this.sizeText = "12px";

    // Font Family attribut 
    this.policeText = this.getAttribute('policeText');
    if(!this.policeText) this.policeText = "Arial";

    // Saisie Text attribut
    this.text = this.getAttribute("text");
    if(!this.text) this.text = "Logo";

    // Text en gras 
    this.weightText = this.getAttribute("weightText");
    if(!this.weightText) this.weightText = "normal";

    // Shadow text 
    this.ShadowText = this.getAttribute("shadowText");


    // Animation
    this.animationClass = this.getAttribute("animation");

    // Elipse1 attribut
    this.couleurElipse1 = this.getAttribute("couleurElipse1");
    this.rotationElipse1 = this.getAttribute("rotationElipse1");

    // Elipse2 attribut
    this.couleurElipse2 = this.getAttribute('couleurElipse2');
    this.rotationElipse2 = this.getAttribute("rotationElipse2");
    
    // Elipse3 attribut
    this.couleurElipse3 = this.getAttribute('couleurElipse3');
    this.rotationElipse3 = this.getAttribute("rotationElipse3");
    
    // Cercle attribut
    this.couleurCercle = this.getAttribute("couleurCercle");
    this.sizeCercle = this.getAttribute("sizeCercle");
}

connectedCallback() {
    // ici on instancie l'interface graphique etc.
    this.shadowRoot.innerHTML = `<style>${this.style}</style>`
        + this.html;

    // Text
    this.textlogoid = this.shadowRoot.querySelector('#textlogoid');
    
    // affecter les valeurs des attributs a la creation 
    // Couleur Text 
    this.textlogoid.style.color = this.couleurText;
    // Size Text 
    this.textlogoid.style.fontSize = this.sizeText;
    // Police Text
    this.textlogoid.style.fontFamily = this.policeText;
    // Saisie Text
    this.textlogoid.innerHTML = this.text;
    // Weight Text
    this.textlogoid.style.fontWeight = this.weightText;
    // Shadow text 
    this.textlogoid.style.textShadow = this.ShadowText;


    // Animation 
    this.animationtextid = this.shadowRoot.querySelector('#animationtextid');
    this.animationtextid.classList.add(this.animationClass);
    
    // Elipse 1 
    this.elipse = this.shadowRoot.querySelector('.elipse');
    this.elipse.style.border = "solid "+this.couleurElipse1+" 5px";
    this.elipse.style.transform = "translate(-50%, -50%) rotate("+this.rotationElipse1+"turn)";
   
    // Elipse 2 
    this.elipse2 = this.shadowRoot.querySelector('.elipse2');
    this.elipse2.style.border = "solid "+this.couleurElipse2+" 5px";
    this.elipse2.style.transform = "translate(-50%, -50%) rotate("+this.rotationElipse2+"turn)";
    
    // Elipse 3 
    this.elipse3 = this.shadowRoot.querySelector('.elipse3');
    this.elipse3.style.border = "solid "+this.couleurElipse3+" 5px";
    this.elipse3.style.transform = "translate(-50%, -50%) rotate("+this.rotationElipse3+"turn)";
    
    // Cercle
    this.cercle = this.shadowRoot.querySelector('.cercle')
    this.cercle.style.border = "solid "+this.couleurCercle+" 5px"
    this.cercle.style.height = this.sizeCercle;
    this.cercle.style.width = this.sizeCercle;



    this.declareEcouteurs();
}

declareEcouteurs() {
    // Couleur Elipse
    this.shadowRoot.querySelector("#selecteurcouleurelipse1")
        .addEventListener("input", (event) => {
            this.changeCouleurElipse(event.target.value);
        });

    this.shadowRoot.querySelector("#selecteurcouleurelipse2")
        .addEventListener("input", (event) => {
            this.changeCouleurElipse2(event.target.value);
        });

    this.shadowRoot.querySelector("#selecteurcouleurelipse3")
        .addEventListener("input", (event) => {
            this.changeCouleurElipse3(event.target.value);
        });

    //Rotation Elipse
    this.shadowRoot.querySelector("#selecteurRotationElipse1")
    .addEventListener("input", (event) => {
        this.changeRotationElipse(event.target.value);
    });

    this.shadowRoot.querySelector("#selecteurRotationElipse2")
    .addEventListener("input", (event) => {
        this.changeRotationElipse2(event.target.value);
    });

    this.shadowRoot.querySelector("#selecteurRotationElipse3")
    .addEventListener("input", (event) => {
        this.changeRotationElipse3(event.target.value);
    });

    // Largeur Elipse
    this.shadowRoot.querySelector("#selecteurLargeurElipse")
    .addEventListener("input", (event) => {
        this.changeLargeurElipse(event.target.value);
    });

    this.shadowRoot.querySelector("#selecteurLargeurElipse2")
    .addEventListener("input", (event) => {
        this.changeLargeurElipse2(event.target.value);
    });

    this.shadowRoot.querySelector("#selecteurLargeurElipse3")
    .addEventListener("input", (event) => {
        this.changeLargeurElipse3(event.target.value);
    });

    // Longueur Elipse
    this.shadowRoot.querySelector("#selecteurLongueurElipse")
    .addEventListener("input", (event) => {
        this.changeLongueurElipse(event.target.value);
    });

    this.shadowRoot.querySelector("#selecteurLongueurElipse2")
    .addEventListener("input", (event) => {
        this.changeLongueurElipse2(event.target.value);
    });

    this.shadowRoot.querySelector("#selecteurLongueurElipse3")
    .addEventListener("input", (event) => {
        this.changeLongueurElipse3(event.target.value);
    });

    // Size du Rond 
    this.shadowRoot.querySelector("#selecteurSizeRond")
    .addEventListener("input", (event) => {
        this.changeSizeRond(event.target.value);
    });

    // Couleur du Rond
    this.shadowRoot.querySelector("#selecteurCouleurRond")
    .addEventListener("input", (event) => {
        this.changeCouleurRond(event.target.value);
    });

    // Text Fonction

    // Modifier text du logo
    this.shadowRoot.querySelector("#selecteurText")
    .addEventListener("input", (event)=> {
        this.changeText(event.target.value);
    });

    // Modifier la couleur du text
    this.shadowRoot.querySelector("#selecteurCouleurText")
        .addEventListener("input", (event) => {
            this.changeCouleurText(event.target.value);
        });

    // Modifier la taille du text
    this.shadowRoot.querySelector("#selecteurTaille")
        .addEventListener("input", (event) => {
            this.changeSizeText(event.target.value);
        });

    // Modifier la police du text 
    this.shadowRoot.querySelector("#selecteurFont")
    .addEventListener("input", (event)=> {
        this.changeFont(event.target.value);
    });   

    // Modifier le weight du text 
    this.shadowRoot.querySelector("#selecteurWeight")
    .addEventListener("click", (event)=> {
        this.changeWeight(event.target.value);
    });  

    // Modifier le text-shadow du text 
    this.shadowRoot.querySelector("#selecteurTextShadow")
    .addEventListener("input", (event)=> {
        this.changeTextShadow(event.target.value);
    });  


}



// Fonctions couleurs Elipse 
changeCouleurElipse(val) {
    this.elipse.style.border = "solid " + val + " 5px";
}

changeCouleurElipse2(val) {
    this.elipse2.style.border = "solid " + val + " 5px";
}

changeCouleurElipse3(val) {
    this.elipse3.style.border = "solid " + val + " 5px";
}


// Fonction rotation Elipse
changeRotationElipse(val) {
    this.elipse.style.transform = "translate(-50%, -50%) rotate("+val+"turn)";   
}

changeRotationElipse2(val) {
    this.elipse2.style.transform = "translate(-50%, -50%) rotate("+val+"turn)";   
}

changeRotationElipse3(val) {
    this.elipse3.style.transform = "translate(-50%, -50%) rotate("+val+"turn)";   
}

// Fonction Largeur Elipse
changeLargeurElipse(val) {
    this.elipse.style.height = val + "px";   
}

changeLargeurElipse2(val) {
    this.elipse2.style.height = val + "px";   
}

changeLargeurElipse3(val) {
    this.elipse3.style.height = val + "px";   
}

// Fonction Longueur Elipse
changeLongueurElipse(val) {
    this.elipse.style.width = val + "px";   
}

changeLongueurElipse2(val) {
    this.elipse2.style.width = val + "px";   
}

changeLongueurElipse3(val) {
    this.elipse3.style.width = val + "px";   
}

// Fonction taille du rond 
changeSizeRond(val) {
    this.cercle.style.width = val + "px";
    this.cercle.style.height = val + "px";
}

// Fonction couleur du rond 
changeCouleurRond(val) {
    this.cercle.style.border = "solid "+ val + " 5px";
}

// Fonction text

// Fonction modifier le text 
changeText(val){
    this.textlogoid.innerHTML = val;
}

// Fonction modifier la couleur du text 
changeCouleurText(val) {
    this.textlogoid.style.color = val;
}

// Fonction modifier la taille du text 
changeSizeText(val) {
    this.textlogoid.style.fontSize = val+ "px";
}

// Fonction modifier la police du text
changeFont(val){
    this.textlogoid.style.fontFamily = "'"+val+"'";
    console.log("'"+val+"'");
}

// Fonction modifer le weight du text
changeWeight(){
    if (this.textlogoid.style.fontWeight=="bold"){
        this.textlogoid.style.fontWeight="normal";
    } 
    else {
        this.textlogoid.style.fontWeight="bold";
    }
}

// Fonction modifier le text shadow 
changeTextShadow(val){
    this.textlogoid.style.textShadow = val;
}


// Fonction
changeCouleur(val) {
    this.logo.style.color = val;
}

changeSize(val) {
    this.logo.style.fontSize = val + "px";
}


changeSizeLogoWidth(val) {
    this.logo.style.width = val + "px";
}

changeSizeLogoHeight(val) {
    this.logo.style.height = val + "px";
}

changeSizeLogo(val) {
    this.logo.style.height = val + "px";
    this.logo.style.width = val + "px";
    this.logo.style.borderRadius = val / 2 + "px";
    
}

EllipseLogo(val) {
    this.logo.style.height = val + "px";
    this.logo.style.width = val + "px";
    this.logo.style.borderRadius = val / 2 + "px";
    
}

changeBorder(val){
    this.logo.style.border = 5 +"px solid"+ val;
}

changeBackground(val){
    this.logo.style.background =  val;
}

changeSizeBorder(val){
    this.logo.style.borderRadius = val + "px";
}

changeSizeBorderPourcentage(val){
    this.logo.style.borderRadius = val + "%";
}




}

customElements.define("my-logo", MyLogo);
